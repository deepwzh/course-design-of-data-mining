<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>系统树</title>
    <style>::-webkit-scrollbar{display:none;}html,body{overflow:hidden;margin:0;}</style>
</head>
<body>
<div id="mountNode"></div>
<script>/*Fixing iframe window.innerHeight 0 issue in Safari*/document.body.clientHeight;</script>
<script src="https://gw.alipayobjects.com/os/antv/pkg/_antv.g6-3.0.0/build/g6.js"></script>
<script src="https://gw.alipayobjects.com/os/antv/assets/lib/jquery-3.2.1.min.js"></script>
<script src="https://gw.alipayobjects.com/os/antv/pkg/_antv.hierarchy-0.4.0/build/hierarchy.js"></script>
<script>
$.getJSON('/assets/data/modeling-methods.json', function(data) {
  const tmp_data = JSON.parse('{"nodes": {"id": "72dd9428-536d-11e9-a814-54ab3aad9f99", "value": "age", "children": [{"id": "72e3359a-536d-11e9-b397-54ab3aad9f99", "value": "yes", "is_leaf": true}, {"id": "72e41f46-536d-11e9-8f3a-54ab3aad9f99", "value": "credit_rating", "children": [{"id": "72e7038c-536d-11e9-abd9-54ab3aad9f99", "value": "no", "is_leaf": true}, {"id": "72e7c65a-536d-11e9-b2cf-54ab3aad9f99", "value": "yes", "is_leaf": true}]}, {"id": "72e8622c-536d-11e9-918b-54ab3aad9f99", "value": "student", "children": [{"id": "72eaf874-536d-11e9-84e0-54ab3aad9f99", "value": "no", "is_leaf": true}, {"id": "72ec7e0c-536d-11e9-b436-54ab3aad9f99", "value": "yes", "is_leaf": true}]}]}, "edges": [{"id": "72dd9428-536d-11e9-a814-54ab3aad9f99:72e3359a-536d-11e9-b397-54ab3aad9f99", "source": "72dd9428-536d-11e9-a814-54ab3aad9f99", "target": "72e3359a-536d-11e9-b397-54ab3aad9f99", "value": "middle_aged"}, {"id": "72dd9428-536d-11e9-a814-54ab3aad9f99:72e41f46-536d-11e9-8f3a-54ab3aad9f99", "source": "72dd9428-536d-11e9-a814-54ab3aad9f99", "target": "72e41f46-536d-11e9-8f3a-54ab3aad9f99", "value": "senior"}, {"id": "72dd9428-536d-11e9-a814-54ab3aad9f99:72e8622c-536d-11e9-918b-54ab3aad9f99", "source": "72dd9428-536d-11e9-a814-54ab3aad9f99", "target": "72e8622c-536d-11e9-918b-54ab3aad9f99", "value": "youth"}, {"id": "72e41f46-536d-11e9-8f3a-54ab3aad9f99:72e7038c-536d-11e9-abd9-54ab3aad9f99", "source": "72e41f46-536d-11e9-8f3a-54ab3aad9f99", "target": "72e7038c-536d-11e9-abd9-54ab3aad9f99", "value": "excellent"}, {"id": "72e41f46-536d-11e9-8f3a-54ab3aad9f99:72e7c65a-536d-11e9-b2cf-54ab3aad9f99", "source": "72e41f46-536d-11e9-8f3a-54ab3aad9f99", "target": "72e7c65a-536d-11e9-b2cf-54ab3aad9f99", "value": "fair"}, {"id": "72e8622c-536d-11e9-918b-54ab3aad9f99:72eaf874-536d-11e9-84e0-54ab3aad9f99", "source": "72e8622c-536d-11e9-918b-54ab3aad9f99", "target": "72eaf874-536d-11e9-84e0-54ab3aad9f99", "value": "no"}, {"id": "72e8622c-536d-11e9-918b-54ab3aad9f99:72ec7e0c-536d-11e9-b436-54ab3aad9f99", "source": "72e8622c-536d-11e9-918b-54ab3aad9f99", "target": "72ec7e0c-536d-11e9-b436-54ab3aad9f99", "value": "yes"}]}');
  data = tmp_data.nodes;
  console.log(tmp_data);
  const edges = tmp_data.edges;
  var graph = new G6.TreeGraph({
    container: 'mountNode',
    width: window.innerWidth,
    height: window.innerHeight,
    pixelRatio: 2,
    modes: {
      default: [{
        type: 'collapse-expand',
        onChange: function onChange(item, collapsed) {
          var data = item.get('model').data;
          data.collapsed = collapsed;
          return true;
        }
      }, 'drag-canvas', 'zoom-canvas']
    },
    defaultNode: {
      size: [100,50],
      shape: 'rect',
      anchorPoints: [[0.5, 0.5]]
    },
    defaultEdge: {
      shape: 'cubic-horizontal'
    },
    nodeStyle: {
      default: {
        fill: '#40a9ff',
        stroke: '#096dd9',
        radius: 20
      }
    },
    edgeStyle: {
      default: {
        stroke: '#A3B1BF',
 
      }
    },
    layout: function layout(data) {
      return Hierarchy.dendrogram(data, {
        direction: 'LR', // H / V / LR / RL / TB / BT
        nodeSep: 70,
        rankSep: 200
      });
    }
  });
  graph.data(data);
  graph.render();
  graph.getNodes().forEach(function(node) {
    //console.log(node);
    var model = node.get('model');
    model.label = model.data.value;
    model.labelCfg = {
      offset: -50,
      style: {
        textAlign: 'center',
        fill: '#666'
      }
    };
    if (model.children && model.children.length > 0) {
      model.labelCfg.position = 'left';
    } else {
      model.labelCfg.position = 'left';
    }
  });
  graph.getEdges().forEach(function(edge) {
    var model = edge.get('model');
  	//console.log(model);
    for (let i = 0; i < edges.length; i++) {
      //console.log(edges[i].id, model.id);	
      if (edges[i].id === model.id) {
        model.label = edges[i].value;  
        console.log(model.id);
          break;
        }
    }
    
  });
  graph.refresh();
  graph.fitView();
});
</script>
</body>
</html>
